#!/bin/sh
# chkconfig: on 90 90

#
# Start and stop the storage operations daemon.
#
# This script supports:
# * start   : Start the python based daemon
# * stop    : Stop the python based daemon
# * restart : Stop and start the daemon.
# * status  : status of the daemon
#

OPSD_BIN="/usr/lib/vmware/vmdkops/bin/vmdk_ops.py"
OPSD_TAG=vmdkops-opsd
OPSD_GROUP_PATH="host/vim/vimuser"
OPSD_GROUP_NAME="vmdkops"
OPSD_GROUP="$OPSD_GROUP_PATH/$OPSD_GROUP_NAME"
OPSD_SCHED_PARAM="++memreliable,group=$OPSD_GROUP"


LOCAL_CLI_SCHED="localcli --plugin-dir=/usr/lib/vmware/esxcli/int sched group"

#WATCHDOG
WATCHDOG=/sbin/watchdog.sh
MAX_RETRY=10
MAX_QUICK_FAILURES=5
SIGTERM=15
SIGKILL=9

# Config
VMDK_OPSD_PORT=1019 # Override using CONFIG_FILE

# Create the following file if defaults need to be overridden
# Example:
# export VMDK_OPSD_PORT=1020
CONFIG_FILE=/etc/vmware/vmdkops/service_config.sh

# The numbers below are to setup the framework for
# resource limits but not setting them up. -1 is unlimited
MINMEM=0
MAXMEM=-1
MINLIMIT=-1
MINCPU=-1
MAXCPU=-1

NUM_RETRY=10
WAIT_KILL_SEC=2
WAIT_START_SEC=1

getpid() {
   ps -uc| grep -v ${WATCHDOG}| grep -v grep | grep ${OPSD_BIN} | awk '{ print $1 }'
}

start() {
   if [ -f $CONFIG_FILE ]
   then
      echo "Loading $CONFIG_FILE"
      . $CONFIG_FILE
   fi

   local PID=$(getpid)
   if [ -n "${PID}" ]; then
      echo "Failed to start. $OPSD_TAG already running."
      exit 1
   fi

   echo "Starting ${OPSD_TAG}"

   GROUP=$(${LOCAL_CLI_SCHED} list |grep ${OPSD_GROUP})
   if [ -z "${GROUP}" ]; then
      ${LOCAL_CLI_SCHED} add --group-name=${OPSD_GROUP_NAME} --parent-path=${OPSD_GROUP_PATH}
      if [ $? -ne 0 ]; then
         echo "Failed to create resource pool $?"
         exit 2
      fi
   fi


   # Pass these params to service.
   OPSD_PARAMS="-p $VMDK_OPSD_PORT"

   ${LOCAL_CLI_SCHED} setmemconfig -g ${OPSD_GROUP} --min=${MINMEM} --max=${MAXMEM} --minlimit=${MINLIMIT} -u mb
   ${LOCAL_CLI_SCHED} setcpuconfig -g ${OPSD_GROUP} --min=${MINCPU} --max=${MAXCPU} -u pct
   setsid ${OPSD_SCHED_PARAM} ${WATCHDOG} -q ${MAX_QUICK_FAILURES} -d -s ${OPSD_TAG} -t ${MAX_RETRY} "${OPSD_BIN} ${OPSD_PARAMS}" > /dev/null 2>&1
   if [ $? -ne 0 ]; then
      echo "Failed to start ${OPSD_TAG}: $?"
      exit 3
   fi

   local wait=${NUM_RETRY}
   while [ $((wait--)) -gt 0 ]; do
      if [ -n "$(${WATCHDOG} -r ${OPSD_TAG})" ]; then
         break
      fi
      sleep ${WAIT_START_SEC}
   done

   check_running_status
   # brute force hack - restart vsanmgmtd to force it to read and server out VMODL py files
   # turned off until we support kill switch.
   # see https://github.com/vmware/vsphere-storage-for-docker/pull/975 for details.

   # /etc/init.d/vsanmgmtd restart ; sleep 3 ;
   exit $?
}

stop() {
   ${WATCHDOG} -n -k ${OPSD_TAG}

   local PID=$(getpid)
   if [ -n "${PID}" ]; then
      echo "Stopping $OPSD_TAG with PID=${PID}"
      kill -$SIGTERM ${PID}
      local COUNT=0
      while kill -0 ${PID} > /dev/null 2>&1; do
         sleep ${WAIT_KILL_SEC};
         if [ $((COUNT++)) -gt ${NUM_RETRY} ]; then
            echo "Sending kill -${SIGKILL} to ${PID} after kill -${SIGTERM} did not stop ${PID}"
            kill -${SIGKILL} ${PID}
            break
         fi
      done
   fi

   ${LOCAL_CLI_SCHED} list --group-path=${OPSD_GROUP} &> /dev/null
   if [ $? -eq 0 ]; then
      ${LOCAL_CLI_SCHED} delete --group-path=${OPSD_GROUP}
      if [ $? -ne 0 ]; then
         echo "Failed to delete resource pool=${OPSD_SCHED_PARAM}"
         check_running_status
         exit 4
      fi
   fi

   check_running_status
   if [ $? -eq 0 ]; then
      echo "Failed to stop $OPSD_TAG"
      exit 5
   fi
   return 0
}

check_running_status () {
   local PID=$(getpid)

   if [ -n "${PID}" ]; then
      echo "${OPSD_TAG} is running pid=${PID}"
      return 0
   fi

   echo "${OPSD_TAG} is not running"
   return 6
}

status() {
   check_running_status
   exit $?
}

case $1 in
   "start")
      start
      ;;
   "stop")
      stop
      ;;
   "status")
      status
      ;;
   "restart")
      stop
      start
      ;;
   "remove") # Called by vib
      stop
      ;;
    *)
      echo "$1 unsupported"
      echo "$0 start|stop|status"
      exit 1
      ;;
esac
